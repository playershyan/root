'use client'

import { useState, useEffect, useRef, useCallback } from 'react'
import Link from 'next/link'
import { supabase } from '@/lib/supabase'
// import { useNotification } from '@/app/components/NotificationSystem'
import { 
  handleSupabaseError, 
  handleNetworkError, 
  handleAPIError, 
  validateImageUrl, 
  safeArrayAccess, 
  withRetry, 
  isOnline,
  logError,
  AppError
} from '@/lib/utils/errorHandling'

// Types
type Listing = {
  id: string
  title: string
  description: string | null
  price: number
  make: string
  model: string
  year: number
  mileage: number | null
  fuel_type: string | null
  transmission: string | null
  location: string
  phone: string
  image_url: string | null
  image_urls: string[] | null
  is_featured: boolean
  created_at: string
}

// Sri Lankan locations
const SRI_LANKAN_LOCATIONS = [
  'Colombo', 'Gampaha', 'Kalutara', 'Kandy', 
  'Galle', 'Matara', 'Negombo', 'Kurunegala',
  'Anuradhapura', 'Jaffna'
]

// Popular car makes
const CAR_MAKES = [
  'Toyota', 'Honda', 'Nissan', 'Mazda',
  'Suzuki', 'Mitsubishi', 'Hyundai', 'BMW',
  'Mercedes-Benz', 'Audi', 'Others'
]

// Model mapping
const MODELS_BY_MAKE: Record<string, string[]> = {
  'Toyota': ['Prius', 'Aqua', 'Corolla', 'Yaris', 'Vitz', 'Allion', 'Premio', 'Camry', 'CHR', 'Hilux'],
  'Honda': ['Civic', 'Fit', 'Vezel', 'Grace', 'City', 'CRV', 'HRV', 'Accord'],
  'Nissan': ['Leaf', 'March', 'Sunny', 'X-Trail', 'Tiida', 'Bluebird'],
  'Suzuki': ['Alto', 'Swift', 'WagonR', 'Celerio', 'Every'],
  'Mazda': ['Axela', 'Demio', 'CX-3', 'CX-5', 'Familia'],
  'Mitsubishi': ['Lancer', 'Montero', 'Outlander', 'Mirage'],
  'Hyundai': ['Elantra', 'Tucson', 'i20', 'Sonata'],
  'BMW': ['3 Series', '5 Series', 'X1', 'X3', 'X5'],
  'Mercedes-Benz': ['C Class', 'E Class', 'A Class', 'GLA'],
  'Audi': ['A3', 'A4', 'A6', 'Q3', 'Q5']
}

// All available models (flatten all models from all makes)
const ALL_MODELS = Object.values(MODELS_BY_MAKE).flat().sort()

// Animated placeholder texts
const PLACEHOLDER_TEXTS = [
  "Prius 2019",
  "Honda Civic in Kandy",
  "Alto 2015 Colombo"
]

export default function AdvancedListingsPage() {
  // State management
  const [listings, setListings] = useState<Listing[]>([])
  const [filteredListings, setFilteredListings] = useState<Listing[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<AppError | null>(null)
  const [retrying, setRetrying] = useState(false)
  // const { showNotification } = useNotification()
  const showNotification = (notification: any) => { console.log('Notification:', notification) }
  const [searchInput, setSearchInput] = useState('') // User input
  const [searchTerm, setSearchTerm] = useState('') // Actual search term for filtering
  const [placeholderText, setPlaceholderText] = useState(PLACEHOLDER_TEXTS[0])
  const [placeholderIndex, setPlaceholderIndex] = useState(0)
  
  // Filters state
  const [selectedLocations, setSelectedLocations] = useState<string[]>([])
  const [selectedMakes, setSelectedMakes] = useState<string[]>([])
  const [selectedModels, setSelectedModels] = useState<string[]>([])
  const [minYear, setMinYear] = useState('')
  const [maxYear, setMaxYear] = useState('')
  const [minPrice, setMinPrice] = useState('')
  const [maxPrice, setMaxPrice] = useState('')
  const [fuelTypes, setFuelTypes] = useState<string[]>([])
  const [transmissionTypes, setTransmissionTypes] = useState<string[]>([])
  const [sortBy, setSortBy] = useState('recent')
  
  // UI state
  const [expandedFilters, setExpandedFilters] = useState({
    location: true,
    make: true,
    model: true,  // Change from false to true
    year: false,
    price: false,
    fuel: false,
    transmission: false,
    mobile: false  // Add mobile filter toggle
  })
  
  const [savedListings, setSavedListings] = useState<string[]>([])
  const [showAIGuide, setShowAIGuide] = useState(false)
  const [aiGuideContent, setAIGuideContent] = useState<{ brief: string; full: string }>({ brief: '', full: '' })
  const [loadingAIGuide, setLoadingAIGuide] = useState(false)
  const [expandedAIGuide, setExpandedAIGuide] = useState(false)

  // Add these search states for filters
  const [locationSearch, setLocationSearch] = useState('')
  const [makeSearch, setMakeSearch] = useState('')
  const [modelSearch, setModelSearch] = useState('')

  // Carousel state
  const [activeImageIndex, setActiveImageIndex] = useState<Record<string, number>>({})
  const [imageLoading, setImageLoading] = useState<Record<string, boolean>>({})
  const [imageError, setImageError] = useState<Record<string, boolean>>({})

  // Search input ref for focus
  const searchInputRef = useRef<HTMLInputElement>(null)

  // Animated placeholder effect
  useEffect(() => {
    const interval = setInterval(() => {
      setPlaceholderIndex((prev) => (prev + 1) % PLACEHOLDER_TEXTS.length)
    }, 3000)
    return () => clearInterval(interval)
  }, [])

  useEffect(() => {
    setPlaceholderText(PLACEHOLDER_TEXTS[placeholderIndex])
  }, [placeholderIndex])

  // Fetch listings
  useEffect(() => {
    fetchListings()
  }, [])

  // Apply filters when any filter changes
  useEffect(() => {
    applyFilters()
  }, [listings, searchTerm, selectedLocations, selectedMakes, selectedModels, 
      minYear, maxYear, minPrice, maxPrice, fuelTypes, transmissionTypes, sortBy])

  // Initialize image loading states
  useEffect(() => {
    const initialLoadingState: Record<string, boolean> = {}
    listings.forEach(listing => {
      if (listing.image_urls && listing.image_urls.length > 0) {
        initialLoadingState[listing.id] = true
      }
    })
    setImageLoading(initialLoadingState)
  }, [listings])

  // Generate AI guide when search changes
  useEffect(() => {
    if (searchTerm && (selectedMakes.length > 0 || searchTerm.length > 3)) {
      generateAIGuide()
    } else {
      setShowAIGuide(false)
    }
  }, [searchTerm, selectedMakes])

  const fetchListings = useCallback(async () => {
    if (!isOnline()) {
      const offlineError: AppError = {
        type: 'network',
        message: 'No internet connection',
        details: 'Please check your connection and try again',
        retryable: true
      }
      setError(offlineError)
      setLoading(false)
      showNotification({
        type: 'error',
        title: 'Connection Error',
        message: 'No internet connection. Please check your connection.',
        action: {
          label: 'Retry',
          onClick: () => fetchListings()
        }
      })
      return
    }

    setLoading(true)
    setError(null)

    try {
      const result = await withRetry(async () => {
        const { data, error } = await supabase
          .from('listings')
          .select('*')
          .eq('is_sold', false)
          .order('created_at', { ascending: false })

        if (error) throw error
        return data
      }, 3, 1000)
      
      // Validate and process image URLs with error handling
      const processedListings = (result || []).map(listing => {
        try {
          const imageUrls = listing.image_urls || (listing.image_url ? [listing.image_url] : [])
          
          // Validate image URLs and filter out invalid ones
          const validImageUrls = imageUrls.filter((url: string) => {
            if (!url || typeof url !== 'string') return false
            return validateImageUrl(url)
          })

          return {
            ...listing,
            image_urls: validImageUrls,
            // Ensure required fields have fallbacks
            title: listing.title || 'Untitled Vehicle',
            price: listing.price || 0,
            location: listing.location || 'Location not specified',
            make: listing.make || 'Unknown',
            model: listing.model || 'Unknown',
            year: listing.year || new Date().getFullYear()
          }
        } catch (processingError) {
          logError({
            type: 'validation',
            message: 'Error processing listing data',
            details: `Listing ID: ${listing.id}`
          }, 'fetchListings')
          
          // Return listing with safe defaults
          return {
            ...listing,
            image_urls: [],
            title: listing.title || 'Untitled Vehicle',
            price: listing.price || 0,
            location: listing.location || 'Location not specified'
          }
        }
      })
      
      setListings(processedListings)
      setError(null)
      
      if (processedListings.length === 0) {
        showNotification({
          type: 'info',
          title: 'No Listings',
          message: 'No vehicles found. Check back later for new listings.'
        })
      }
    } catch (error: any) {
      let appError: AppError

      if (error.code) {
        // Supabase error
        appError = handleSupabaseError(error)
      } else if (error instanceof Error) {
        appError = handleNetworkError(error)
      } else {
        appError = {
          type: 'unknown',
          message: 'An unexpected error occurred',
          details: 'Please try again later',
          retryable: true
        }
      }

      setError(appError)
      logError(appError, 'fetchListings')
      
      showNotification({
        type: 'error',
        title: 'Failed to Load Listings',
        message: appError.message,
        action: appError.retryable ? {
          label: 'Retry',
          onClick: () => {
            setRetrying(true)
            setTimeout(() => {
              setRetrying(false)
              fetchListings()
            }, 1000)
          }
        } : undefined
      })
    } finally {
      setLoading(false)
    }
  }, [showNotification])

  const applyFilters = () => {
    let filtered = [...listings]

    // Search term filter
    if (searchTerm) {
      filtered = filtered.filter(listing => 
        listing.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        listing.make.toLowerCase().includes(searchTerm.toLowerCase()) ||
        listing.model.toLowerCase().includes(searchTerm.toLowerCase()) ||
        listing.location.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    // Location filter
    if (selectedLocations.length > 0) {
      filtered = filtered.filter(listing => 
        selectedLocations.some(loc => listing.location.toLowerCase().includes(loc.toLowerCase()))
      )
    }

    // Make filter
    if (selectedMakes.length > 0) {
      filtered = filtered.filter(listing => 
        selectedMakes.includes(listing.make)
      )
    }

    // Model filter
    if (selectedModels.length > 0) {
      filtered = filtered.filter(listing => 
        selectedModels.includes(listing.model)
      )
    }

    // Year filter
    if (minYear) {
      filtered = filtered.filter(listing => listing.year >= parseInt(minYear))
    }
    if (maxYear) {
      filtered = filtered.filter(listing => listing.year <= parseInt(maxYear))
    }

    // Price filter
    if (minPrice) {
      filtered = filtered.filter(listing => listing.price >= parseInt(minPrice))
    }
    if (maxPrice) {
      filtered = filtered.filter(listing => listing.price <= parseInt(maxPrice))
    }

    // Fuel type filter
    if (fuelTypes.length > 0) {
      filtered = filtered.filter(listing => 
        listing.fuel_type && fuelTypes.includes(listing.fuel_type)
      )
    }

    // Transmission filter
    if (transmissionTypes.length > 0) {
      filtered = filtered.filter(listing => 
        listing.transmission && transmissionTypes.includes(listing.transmission)
      )
    }

    // Apply sorting
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'price-low':
          return a.price - b.price
        case 'price-high':
          return b.price - a.price
        case 'year-new':
          return b.year - a.year
        case 'year-old':
          return a.year - b.year
        case 'mileage-low':
          return (a.mileage || 0) - (b.mileage || 0)
        default: // recent
          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
      }
    })

    setFilteredListings(filtered)
  }

  const generateAIGuide = useCallback(async () => {
    if (!isOnline()) {
      showNotification({
        type: 'warning',
        title: 'Offline',
        message: 'AI guide requires internet connection'
      })
      return
    }

    setLoadingAIGuide(true)
    setShowAIGuide(true)
    setExpandedAIGuide(false)
    
    try {
      // Create and validate search context
      const searchContext = [
        searchTerm,
        ...selectedMakes,
        ...selectedModels
      ].filter(Boolean).join(' ').trim()
      
      if (!searchContext && selectedMakes.length === 0) {
        setAIGuideContent({
          brief: '<p>Please select a vehicle make or search term to get personalized buying advice.</p>',
          full: '<p>Please select a vehicle make or search term to get personalized buying advice.</p>'
        })
        return
      }

      const result = await withRetry(async () => {
        const controller = new AbortController()
        const timeoutId = setTimeout(() => controller.abort(), 30000) // 30 second timeout

        try {
          const response = await fetch('/api/generate-ai-guide', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              searchContext: searchContext || 'general vehicle buying'
            }),
            signal: controller.signal
          })

          clearTimeout(timeoutId)

          if (!response.ok) {
            const appError = await handleAPIError(response)
            throw appError
          }

          return await response.json()
        } catch (error) {
          clearTimeout(timeoutId)
          if (error instanceof Error && error.name === 'AbortError') {
            throw new Error('Request timed out')
          }
          throw error
        }
      }, 2, 2000)

      // Validate response data
      const brief = result.compact || '<p>Brief guide could not be generated.</p>'
      const full = result.detailed || '<p>Detailed guide could not be generated.</p>'

      setAIGuideContent({ brief, full })
      
    } catch (error: any) {
      let appError: AppError

      if (error.type) {
        // Already an AppError
        appError = error
      } else if (error instanceof Error) {
        if (error.message.includes('timeout')) {
          appError = {
            type: 'api',
            message: 'AI guide generation timed out',
            details: 'The AI service is taking too long to respond',
            retryable: true
          }
        } else {
          appError = handleNetworkError(error)
        }
      } else {
        appError = {
          type: 'unknown',
          message: 'Failed to generate AI guide',
          details: 'Please try again later',
          retryable: true
        }
      }

      logError(appError, 'generateAIGuide')

      const fallbackContent = `
        <p style="font-size: 0.75rem; font-style: italic; color: #666; margin-bottom: 1rem;">
          AI guide temporarily unavailable. Please try again later.
        </p>
        <p>We're unable to generate personalized buying advice right now. 
        In the meantime, consider checking:</p>
        <ul>
          <li>Vehicle service history and maintenance records</li>
          <li>Overall condition and any visible damage</li>
          <li>Market price comparison for similar vehicles</li>
          <li>Insurance and registration validity</li>
        </ul>
      `

      setAIGuideContent({
        brief: fallbackContent,
        full: fallbackContent
      })
      
      if (appError.retryable) {
        showNotification({
          type: 'error',
          title: 'AI Guide Failed',
          message: appError.message,
          action: {
            label: 'Try Again',
            onClick: generateAIGuide
          }
        })
      } else {
        showNotification({
          type: 'error',
          title: 'AI Guide Unavailable',
          message: appError.message
        })
      }
    } finally {
      setLoadingAIGuide(false)
    }
  }, [searchTerm, selectedMakes, selectedModels, showNotification])

  const toggleFilter = (filterName: keyof typeof expandedFilters) => {
    setExpandedFilters(prev => ({
      ...prev,
      [filterName]: !prev[filterName]
    }))
  }

  const handleSearch = () => {
    setSearchTerm(searchInput)
  }

  const clearAllFilters = () => {
    setSearchInput('')
    setSearchTerm('')
    setSelectedLocations([])
    setSelectedMakes([])
    setSelectedModels([])
    setMinYear('')
    setMaxYear('')
    setMinPrice('')
    setMaxPrice('')
    setFuelTypes([])
    setTransmissionTypes([])
    setSortBy('recent')
    // Clear filter searches
    setLocationSearch('')
    setMakeSearch('')
    setModelSearch('')
    
    // Clear localStorage cache
    localStorage.removeItem('vehiclePostDraft')
    localStorage.removeItem('listingsCache')
    localStorage.removeItem('userPreferences')
  }

  const toggleSavedListing = (listingId: string) => {
    setSavedListings(prev => 
      prev.includes(listingId) 
        ? prev.filter(id => id !== listingId)
        : [...prev, listingId]
    )
  }

  const navigateImage = useCallback((listingId: string, direction: 'prev' | 'next', totalImages: number) => {
    // Validate inputs
    if (!listingId || totalImages <= 0) {
      logError({
        type: 'validation',
        message: 'Invalid image navigation parameters',
        details: `listingId: ${listingId}, totalImages: ${totalImages}`
      }, 'navigateImage')
      return
    }

    setActiveImageIndex(prev => {
      const currentIndex = Math.max(0, prev[listingId] || 0)
      
      // Ensure index stays within bounds
      let newIndex: number
      if (direction === 'prev') {
        newIndex = currentIndex === 0 ? totalImages - 1 : currentIndex - 1
      } else {
        newIndex = currentIndex === totalImages - 1 ? 0 : currentIndex + 1
      }
      
      // Double-check bounds
      newIndex = Math.max(0, Math.min(newIndex, totalImages - 1))
      
      return { ...prev, [listingId]: newIndex }
    })
  }, [])

  const getPageTitle = () => {
    if (selectedLocations.length > 0) {
      return `Cars for sale in ${selectedLocations.join(', ')}`
    }
    return 'Cars for sale in all of Sri Lanka'
  }

  // Render filter content - reusable for both mobile and desktop
  const renderFilterContent = () => {
    return (
      <>
        {/* Sort By */}
      <div className="mb-6 border-b pb-4">
        <label htmlFor="sort-filter" className="block font-semibold text-gray-700 text-sm mb-2">
          Sort by
        </label>
        <select
          id="sort-filter"
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          className="w-full px-2 py-1.5 border border-gray-300 rounded text-xs focus:outline-none focus:border-blue-500"
        >
          <option value="recent">Most Recently Listed</option>
          <option value="price-low">Price: Low to High</option>
          <option value="price-high">Price: High to Low</option>
          <option value="year-new">Year: Newest First</option>
          <option value="year-old">Year: Oldest First</option>
          <option value="mileage-low">Mileage: Lowest First</option>
        </select>
      </div>

      {/* Location Filter */}
      <div className="mb-6">
        <div 
          onClick={() => toggleFilter('location')}
          className="flex justify-between items-center cursor-pointer py-2 hover:bg-gray-50 -mx-2 px-2 rounded"
        >
          <span className="font-semibold text-gray-700">Location</span>
          <span className={`text-gray-400 text-sm transition-transform ${expandedFilters.location ? 'rotate-180' : ''}`}>
            ▼
          </span>
        </div>
        <div className={`mt-3 space-y-2 overflow-hidden transition-all ${expandedFilters.location ? 'max-h-64' : 'max-h-0'}`}>
          <input 
            type="text" 
            placeholder="Search locations..."
            value={locationSearch}
            onChange={(e) => setLocationSearch(e.target.value)}
            className="w-full px-3 py-2 border rounded-md text-sm mb-2"
          />
          <div className="max-h-48 overflow-y-auto border rounded-md p-2 bg-gray-50">
            {SRI_LANKAN_LOCATIONS
              .filter(location => 
                location.toLowerCase().includes(locationSearch.toLowerCase())
              )
              .map(location => (
                <label 
                  key={location}
                  className={`block py-1 px-2 rounded cursor-pointer hover:bg-blue-50 text-xs ${
                    selectedLocations.includes(location) ? 'bg-yellow-50 font-semibold text-yellow-700' : ''
                  }`}
                >
                  <input
                    type="checkbox"
                    checked={selectedLocations.includes(location)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setSelectedLocations([...selectedLocations, location])
                      } else {
                        setSelectedLocations(selectedLocations.filter(l => l !== location))
                      }
                    }}
                    className="sr-only"
                  />
                  {location}
                </label>
              ))}
          </div>
        </div>
      </div>

      {/* Make Filter */}
      <div className="mb-6">
        <div 
          onClick={() => toggleFilter('make')}
          className="flex justify-between items-center cursor-pointer py-2 hover:bg-gray-50 -mx-2 px-2 rounded"
        >
          <span className="font-semibold text-gray-700">Make</span>
          <span className={`text-gray-400 text-sm transition-transform ${expandedFilters.make ? 'rotate-180' : ''}`}>
            ▼
          </span>
        </div>
        {expandedFilters.make && (
          <div className="mt-2">
            <input
              type="text"
              placeholder="Search makes..."
              value={makeSearch}
              onChange={(e) => setMakeSearch(e.target.value)}
              className="w-full px-2 py-1.5 mb-2 border border-gray-300 rounded text-xs"
            />
            <div className="max-h-40 overflow-y-auto border rounded-md p-2 bg-gray-50">
              {CAR_MAKES
                .filter(make => 
                  make.toLowerCase().includes(makeSearch.toLowerCase())
                )
                .map(make => (
                  <label 
                    key={make}
                    className={`block py-1 px-2 rounded cursor-pointer hover:bg-blue-50 text-xs ${
                      selectedMakes.includes(make) ? 'bg-yellow-50 font-semibold text-yellow-700' : ''
                    }`}
                  >
                    <input
                      type="checkbox"
                      checked={selectedMakes.includes(make)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedMakes([...selectedMakes, make])
                        } else {
                          const newSelectedMakes = selectedMakes.filter(m => m !== make)
                          setSelectedMakes(newSelectedMakes)
                          if (newSelectedMakes.length === 0) {
                            setSelectedModels([])
                          } else {
                            const availableModels = newSelectedMakes.flatMap(m => MODELS_BY_MAKE[m] || [])
                            setSelectedModels(selectedModels.filter(model => availableModels.includes(model)))
                          }
                        }
                      }}
                      className="sr-only"
                    />
                    {make}
                  </label>
                ))}
            </div>
          </div>
        )}
      </div>

      {/* Model Filter */}
      <div className="mb-3 border-b pb-3">
        <button
          onClick={() => toggleFilter('model')}
          className="flex justify-between items-center w-full py-1.5 text-left font-semibold text-gray-700 text-sm hover:bg-gray-50 -mx-2 px-2 rounded cursor-pointer"
        >
          Model
          <i className={`fas ${expandedFilters.model ? 'fa-chevron-up' : 'fa-chevron-down'} text-gray-400 text-xs`}></i>
        </button>
        {expandedFilters.model && (
          <div className="mt-2">
            <input
              type="text"
              placeholder="Search models..."
              value={modelSearch}
              onChange={(e) => setModelSearch(e.target.value)}
              className="w-full px-2 py-1.5 mb-2 border border-gray-300 rounded text-xs"
            />
            <div className="max-h-40 overflow-y-auto border rounded-md p-2 bg-gray-50">
              {(selectedMakes.length > 0 
                ? selectedMakes.flatMap(make => MODELS_BY_MAKE[make] || [])
                : ALL_MODELS
              )
                .filter(model => 
                  model.toLowerCase().includes(modelSearch.toLowerCase())
                )
                .map(model => (
                  <label 
                    key={model}
                    className={`block py-1 px-2 rounded cursor-pointer hover:bg-blue-50 text-xs ${
                      selectedModels.includes(model) ? 'bg-yellow-50 font-semibold text-yellow-700' : ''
                    }`}
                  >
                    <input
                      type="checkbox"
                      checked={selectedModels.includes(model)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedModels([...selectedModels, model])
                        } else {
                          setSelectedModels(selectedModels.filter(m => m !== model))
                        }
                      }}
                      className="sr-only"
                    />
                    {model}
                  </label>
                ))}
            </div>
          </div>
        )}
      </div>

      {/* Year Range Filter */}
      <div className="mb-3 border-b pb-3">
        <button
          onClick={() => toggleFilter('year')}
          className="flex justify-between items-center w-full py-1.5 text-left font-semibold text-gray-700 text-sm hover:bg-gray-50 -mx-2 px-2 rounded cursor-pointer"
        >
          Year
          <i className={`fas ${expandedFilters.year ? 'fa-chevron-up' : 'fa-chevron-down'} text-gray-400 text-xs`}></i>
        </button>
        {expandedFilters.year && (
          <div className="mt-2 space-y-1.5">
            <input
              type="number"
              placeholder="Min Year"
              value={minYear}
              onChange={(e) => setMinYear(e.target.value)}
              className="w-full px-2 py-1.5 border border-gray-300 rounded text-xs"
              min="1990"
              max="2025"
            />
            <input
              type="number"
              placeholder="Max Year"
              value={maxYear}
              onChange={(e) => setMaxYear(e.target.value)}
              className="w-full px-2 py-1.5 border border-gray-300 rounded text-xs"
              min="1990"
              max="2025"
            />
          </div>
        )}
      </div>

      {/* Price Range Filter */}
      <div className="mb-3 border-b pb-3">
        <button
          onClick={() => toggleFilter('price')}
          className="flex justify-between items-center w-full py-1.5 text-left font-semibold text-gray-700 text-sm hover:bg-gray-50 -mx-2 px-2 rounded cursor-pointer"
        >
          Price (LKR)
          <i className={`fas ${expandedFilters.price ? 'fa-chevron-up' : 'fa-chevron-down'} text-gray-400 text-xs`}></i>
        </button>
        {expandedFilters.price && (
          <div className="mt-2 space-y-1.5">
            <input
              type="number"
              placeholder="Min Price"
              value={minPrice}
              onChange={(e) => setMinPrice(e.target.value)}
              className="w-full px-2 py-1.5 border border-gray-300 rounded text-xs"
            />
            <input
              type="number"
              placeholder="Max Price"
              value={maxPrice}
              onChange={(e) => setMaxPrice(e.target.value)}
              className="w-full px-2 py-1.5 border border-gray-300 rounded text-xs"
            />
          </div>
        )}
      </div>

      {/* Fuel Type Filter */}
      <div className="mb-3 border-b pb-3">
        <button
          onClick={() => toggleFilter('fuel')}
          className="flex justify-between items-center w-full py-1.5 text-left font-semibold text-gray-700 text-sm hover:bg-gray-50 -mx-2 px-2 rounded cursor-pointer"
        >
          Fuel Type
          <i className={`fas ${expandedFilters.fuel ? 'fa-chevron-up' : 'fa-chevron-down'} text-gray-400 text-xs`}></i>
        </button>
        {expandedFilters.fuel && (
          <div className="mt-2 border rounded-md p-2 bg-gray-50 max-h-32 overflow-y-auto">
            {['Petrol', 'Diesel', 'Hybrid', 'Electric'].map(fuel => (
              <label 
                key={fuel}
                className={`block py-1 px-2 rounded cursor-pointer hover:bg-blue-50 text-xs ${
                  fuelTypes.includes(fuel) ? 'bg-yellow-50 font-semibold text-yellow-700' : ''
                }`}
              >
                <input
                  type="checkbox"
                  checked={fuelTypes.includes(fuel)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setFuelTypes([...fuelTypes, fuel])
                    } else {
                      setFuelTypes(fuelTypes.filter(f => f !== fuel))
                    }
                  }}
                  className="sr-only"
                />
                {fuel}
              </label>
            ))}
          </div>
        )}
      </div>

      {/* Transmission Filter */}
      <div className="mb-3 border-b pb-3">
        <button
          onClick={() => toggleFilter('transmission')}
          className="flex justify-between items-center w-full py-1.5 text-left font-semibold text-gray-700 text-sm hover:bg-gray-50 -mx-2 px-2 rounded cursor-pointer"
        >
          Transmission
          <i className={`fas ${expandedFilters.transmission ? 'fa-chevron-up' : 'fa-chevron-down'} text-gray-400 text-xs`}></i>
        </button>
        {expandedFilters.transmission && (
          <div className="mt-2 border rounded-md p-2 bg-gray-50 max-h-32 overflow-y-auto">
            {['Automatic', 'Manual'].map(trans => (
              <label 
                key={trans}
                className={`block py-1 px-2 rounded cursor-pointer hover:bg-blue-50 text-xs ${
                  transmissionTypes.includes(trans) ? 'bg-yellow-50 font-semibold text-yellow-700' : ''
                }`}
              >
                <input
                  type="checkbox"
                  checked={transmissionTypes.includes(trans)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setTransmissionTypes([...transmissionTypes, trans])
                    } else {
                      setTransmissionTypes(transmissionTypes.filter(t => t !== trans))
                    }
                  }}
                  className="sr-only"
                />
                {trans}
              </label>
            ))}
          </div>
        )}
      </div>
      </>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Search Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <h1 className="text-2xl font-bold mb-3">{getPageTitle()}</h1>
          
          {/* Search Bar with Mobile Filter Button */}
          <div className="max-w-2xl mb-3">
            <div className="flex gap-2">
              {/* Mobile Filter Button - Left of Search */}
              <button
                onClick={() => setExpandedFilters(prev => ({ ...prev, mobile: !prev.mobile }))}
                className="lg:hidden px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 flex items-center gap-2 text-sm"
              >
                <i className="fas fa-filter"></i>
                <span>Filters</span>
              </button>
              
              {/* Search Input */}
              <div className="relative flex-1">
                <input
                  ref={searchInputRef}
                  type="text"
                  value={searchInput}
                  onChange={(e) => setSearchInput(e.target.value)}
                  placeholder={placeholderText}
                  className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 text-sm"
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                />
                <button
                  onClick={handleSearch}
                  className="absolute right-1 top-1 p-1.5 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                  aria-label="Search"
                >
                  <i className="fas fa-search text-sm"></i>
                </button>
              </div>
            </div>
          </div>

          {/* Results count */}
          <p className="text-gray-600 text-sm">
            Found <span className="font-semibold">{filteredListings.length}</span> vehicles
          </p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12">
        {/* Mobile Filter Panel - Overlay */}
        {(expandedFilters as any).mobile && (
          <div className="fixed inset-0 z-50 bg-black bg-opacity-50 lg:hidden">
            <div className="absolute right-0 top-0 h-full w-full max-w-sm bg-white shadow-xl overflow-y-auto">
              <div className="sticky top-0 bg-white border-b px-4 py-3 flex justify-between items-center">
                <h3 className="text-lg font-semibold">Filters</h3>
                <button
                  onClick={() => setExpandedFilters(prev => ({ ...prev, mobile: false }))}
                  className="p-2 text-gray-500 hover:text-gray-700"
                >
                  <i className="fas fa-times text-xl"></i>
                </button>
              </div>
              <div className="p-4">
                <div className="flex justify-between items-center mb-4">
                  <span className="text-sm text-gray-600">
                    {Object.values({
                      locations: selectedLocations,
                      makes: selectedMakes,
                      models: selectedModels,
                      minYear, maxYear, minPrice, maxPrice,
                      fuelTypes, transmissionTypes
                    }).filter(f => 
                      (Array.isArray(f) && f.length > 0) || (typeof f === 'string' && f)
                    ).length} filters applied
                  </span>
                  <button 
                    onClick={clearAllFilters}
                    className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                  >
                    Clear all
                  </button>
                </div>
                {renderFilterContent()}
              </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Filters Sidebar - Desktop */}
          <div className="hidden lg:block lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-3 sticky top-20">
              <div className="flex justify-between items-center mb-4 pb-3 border-b">
                <h3 className="text-base font-bold text-gray-900">Filters</h3>
                <button
                  onClick={clearAllFilters}
                  className="text-blue-600 hover:text-blue-700 text-xs font-medium"
                >
                  Clear all
                </button>
              </div>
              {renderFilterContent()}
            </div>
          </div>

          {/* Main Content Area */}
          <div className="lg:col-span-3">
            {/* AI Buying Guide */}
            {showAIGuide && (
              <div className="mb-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 border border-blue-200">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center">
                    <i className="fas fa-star text-lg mr-2 text-yellow-500"></i>
                    <h2 className="text-lg font-semibold text-blue-900">AI Buying Guide</h2>
                  </div>
                  <button
                    onClick={() => setShowAIGuide(false)}
                    className="text-gray-400 hover:text-gray-600 p-1"
                    aria-label="Close AI Guide"
                  >
                    <i className="fas fa-times"></i>
                  </button>
                </div>
                {loadingAIGuide ? (
                  <div className="animate-pulse">
                    <div className="h-4 bg-blue-200 rounded w-3/4 mb-2"></div>
                    <div className="h-4 bg-blue-200 rounded w-1/2 mb-2"></div>
                    <div className="h-4 bg-blue-200 rounded w-2/3"></div>
                  </div>
                ) : (
                  <div>
                    {/* Brief content or expanded content with top collapse button */}
                    {!expandedAIGuide ? (
                      <div 
                        className="ai-guide-content text-gray-700 mb-3"
                        dangerouslySetInnerHTML={{ __html: aiGuideContent.brief }}
                        style={{
                          lineHeight: '1.6',
                          fontSize: '0.95rem'
                        }}
                      />
                    ) : (
                      <div>
                        {/* Brief overview */}
                        <div 
                          className="ai-guide-content text-gray-700 mb-3"
                          dangerouslySetInnerHTML={{ __html: aiGuideContent.brief }}
                          style={{
                            lineHeight: '1.6',
                            fontSize: '0.95rem'
                          }}
                        />
                        
                        {/* Top collapse button */}
                        <div className="flex justify-start mb-4 pb-2 border-b border-blue-100">
                          <button
                            onClick={() => setExpandedAIGuide(false)}
                            className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center gap-1"
                          >
                            <span>See less</span>
                            <i className="fas fa-chevron-up text-xs"></i>
                          </button>
                        </div>
                        
                        {/* Detailed content */}
                        <div 
                          className="ai-guide-content text-gray-700 mb-3"
                          dangerouslySetInnerHTML={{ __html: aiGuideContent.full }}
                          style={{
                            lineHeight: '1.6',
                            fontSize: '0.95rem'
                          }}
                        />
                      </div>
                    )}
                    
                    <div className="flex items-center justify-between pt-2 border-t border-blue-200">
                      <button
                        onClick={() => setExpandedAIGuide(!expandedAIGuide)}
                        className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center gap-1"
                      >
                        <span>{expandedAIGuide ? 'See less' : 'See more'}</span>
                        <i className={`fas fa-chevron-${expandedAIGuide ? 'up' : 'down'} text-xs`}></i>
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Error State */}
            {error && !loading && (
              <div className="bg-white rounded-lg shadow-sm p-8 text-center">
                <div className="text-red-500 mb-4">
                  <i className="fas fa-exclamation-triangle text-4xl"></i>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {error.type === 'network' ? 'Connection Problem' : 'Unable to Load Listings'}
                </h3>
                <p className="text-gray-600 mb-4">{error.message}</p>
                {error.details && (
                  <p className="text-sm text-gray-500 mb-4">{error.details}</p>
                )}
                {error.retryable && (
                  <button
                    onClick={fetchListings}
                    disabled={retrying}
                    className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {retrying ? (
                      <>
                        <i className="fas fa-spinner fa-spin mr-2"></i>
                        Retrying...
                      </>
                    ) : (
                      <>
                        <i className="fas fa-refresh mr-2"></i>
                        Try Again
                      </>
                    )}
                  </button>
                )}
              </div>
            )}

            {/* Loading State */}
            {loading && (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {[...Array(6)].map((_, i) => (
                  <div key={i} className="bg-white rounded-lg shadow-sm p-4 animate-pulse">
                    <div className="h-48 bg-gray-200 rounded mb-4"></div>
                    <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                    <div className="h-6 bg-gray-200 rounded w-1/2"></div>
                  </div>
                ))}
              </div>
            )}

            {/* Listings Grid */}
            {!loading && !error && filteredListings.length > 0 && (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredListings.map((listing) => {
                  if (!listing || !listing.id) {
                    logError({
                      type: 'validation',
                      message: 'Invalid listing data',
                      details: 'Listing missing required fields'
                    }, 'listingRender')
                    return null
                  }

                  const images = Array.isArray(listing.image_urls) ? listing.image_urls : []
                  const currentImageIndex = safeArrayAccess(
                    images, 
                    activeImageIndex[listing.id] || 0, 
                    0
                  )
                  const isSaved = savedListings.includes(listing.id)
                  
                  return (
                    <div key={listing.id} className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow">
                      {/* Image Carousel */}
                      <div className="relative h-48 bg-gray-200 rounded-t-lg overflow-hidden group">
                        {images.length > 0 ? (
                          <>
                            {!imageLoading[listing.id] && !imageError[listing.id] && images.length > 0 && (
                              <img
                                src={images[Math.min(currentImageIndex, images.length - 1)]}
                                alt={listing.title || 'Vehicle image'}
                                className="w-full h-full object-cover"
                                onLoad={() => setImageLoading(prev => ({ ...prev, [listing.id]: false }))}
                                onError={(e) => {
                                  logError({
                                    type: 'validation',
                                    message: 'Image failed to load',
                                    details: `URL: ${(e.target as HTMLImageElement).src}, Listing: ${listing.id}`
                                  }, 'imageLoad')
                                  setImageError(prev => ({ ...prev, [listing.id]: true }))
                                }}
                                loading="lazy"
                              />
                            )}
                            {imageLoading[listing.id] && (
                              <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                              </div>
                            )}
                            {imageError[listing.id] && (
                              <div className="absolute inset-0 flex items-center justify-center bg-gray-100 text-gray-500">
                                <span>Image failed to load</span>
                              </div>
                            )}
                            {images.length > 1 && (
                              <>
                                <button
                                  onClick={(e) => {
                                    e.preventDefault()
                                    navigateImage(listing.id, 'prev', images.length)
                                  }}
                                  aria-label={`Previous image (${currentImageIndex + 1} of ${images.length})`}
                                  className="absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                                >
                                  <i className="fas fa-chevron-left"></i>
                                </button>
                                <button
                                  onClick={(e) => {
                                    e.preventDefault()
                                    navigateImage(listing.id, 'next', images.length)
                                  }}
                                  aria-label={`Next image (${currentImageIndex + 1} of ${images.length})`}
                                  className="absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                                >
                                  <i className="fas fa-chevron-right"></i>
                                </button>
                                <div className="absolute bottom-2 right-2 bg-black/50 text-white px-2 py-1 rounded text-xs">
                                  {currentImageIndex + 1}/{images.length}
                                </div>
                              </>
                            )}
                          </>
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-gray-400">
                            No image
                          </div>
                        )}
                        
                        {/* Featured Badge */}
                        {listing.is_featured && (
                          <div className="absolute top-2 left-2 bg-yellow-500 text-white px-2 py-1 rounded text-xs font-semibold">
                            Featured
                          </div>
                        )}
                        
                        {/* Save Button */}
                        <button
                          onClick={(e) => {
                            e.preventDefault()
                            toggleSavedListing(listing.id)
                          }}
                          className="absolute top-2 right-2 bg-white/90 p-2 rounded-full hover:bg-white transition-colors"
                        >
                          <i className={`fas fa-heart text-xl ${isSaved ? 'text-red-500' : 'text-gray-400'}`}></i>
                        </button>
                      </div>
                      
                      {/* Listing Details */}
                      <Link href={`/listings/${listing.id}`} className="block p-4">
                        <h3 className="font-semibold text-lg mb-2 hover:text-blue-600 transition-colors">
                          {listing.title}
                        </h3>
                        <p className="text-2xl font-bold text-blue-600 mb-3">
                          Rs. {listing.price.toLocaleString()}
                        </p>
                        
                        {/* Key Specs */}
                        <div className="space-y-2 text-sm text-gray-600">
                          <div className="flex items-center gap-2">
                            <i className="fas fa-map-marker-alt text-gray-500"></i>
                            <span>{listing.location}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <i className="fas fa-gas-pump text-gray-500"></i>
                            <span>{listing.fuel_type || 'N/A'}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <i className="fas fa-road text-gray-500"></i>
                            <span>{listing.mileage?.toLocaleString() || 'N/A'} km</span>
                          </div>
                        </div>
                        
                        {/* Contact Button */}
                        <button className="w-full mt-4 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors">
                          Contact Dealer
                        </button>
                      </Link>
                    </div>
                  )
                })}
              </div>
            ) : (
              <div className="text-center py-12">
                <p className="text-gray-500 text-lg mb-4">No vehicles found matching your criteria.</p>
                <button
                  onClick={clearAllFilters}
                  className="text-blue-600 hover:text-blue-700 font-medium"
                >
                  Clear all filters
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}